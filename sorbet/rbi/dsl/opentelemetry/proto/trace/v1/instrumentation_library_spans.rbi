# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Opentelemetry::Proto::Trace::V1::InstrumentationLibrarySpans`.
# Please instead update this file by running `bin/tapioca dsl Opentelemetry::Proto::Trace::V1::InstrumentationLibrarySpans`.

class Opentelemetry::Proto::Trace::V1::InstrumentationLibrarySpans
  sig { params(instrumentation_library: Opentelemetry::Proto::Common::V1::InstrumentationLibrary, spans: T.any(Google::Protobuf::RepeatedField[Opentelemetry::Proto::Trace::V1::Span], T::Array[Opentelemetry::Proto::Trace::V1::Span])).void }
  def initialize(instrumentation_library: nil, spans: Google::Protobuf::RepeatedField.new(:message, Opentelemetry::Proto::Trace::V1::Span)); end

  sig { returns(Opentelemetry::Proto::Common::V1::InstrumentationLibrary) }
  def instrumentation_library; end

  sig { params(value: Opentelemetry::Proto::Common::V1::InstrumentationLibrary).returns(Opentelemetry::Proto::Common::V1::InstrumentationLibrary) }
  def instrumentation_library=(value); end

  sig { returns(Google::Protobuf::RepeatedField[Opentelemetry::Proto::Trace::V1::Span]) }
  def spans; end

  sig { params(value: Google::Protobuf::RepeatedField[Opentelemetry::Proto::Trace::V1::Span]).returns(Google::Protobuf::RepeatedField[Opentelemetry::Proto::Trace::V1::Span]) }
  def spans=(value); end
end
