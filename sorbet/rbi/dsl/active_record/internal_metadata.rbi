# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `ActiveRecord::InternalMetadata`.
# Please instead update this file by running `bin/tapioca dsl ActiveRecord::InternalMetadata`.

class ActiveRecord::InternalMetadata
  include GeneratedAttributeMethods

  module GeneratedAttributeMethods
    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def created_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def created_at_previous_change; end

    sig { returns(T::Boolean) }
    def created_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def key; end

    sig { params(value: ::String).returns(::String) }
    def key=(value); end

    sig { returns(T::Boolean) }
    def key?; end

    sig { returns(T.nilable(::String)) }
    def key_before_last_save; end

    sig { returns(T.untyped) }
    def key_before_type_cast; end

    sig { returns(T::Boolean) }
    def key_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def key_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def key_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def key_changed?; end

    sig { returns(T.nilable(::String)) }
    def key_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def key_previous_change; end

    sig { returns(T::Boolean) }
    def key_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def key_previously_was; end

    sig { returns(T.nilable(::String)) }
    def key_was; end

    sig { void }
    def key_will_change!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_key!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_value!; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_key; end

    sig { returns(T::Boolean) }
    def saved_change_to_key?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_value?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def updated_at_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([T.nilable(::ActiveSupport::TimeWithZone), T.nilable(::ActiveSupport::TimeWithZone)])) }
    def updated_at_previous_change; end

    sig { returns(T::Boolean) }
    def updated_at_previously_changed?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def value; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def value=(value); end

    sig { returns(T::Boolean) }
    def value?; end

    sig { returns(T.nilable(::String)) }
    def value_before_last_save; end

    sig { returns(T.untyped) }
    def value_before_type_cast; end

    sig { returns(T::Boolean) }
    def value_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def value_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def value_change_to_be_saved; end

    sig { returns(T::Boolean) }
    def value_changed?; end

    sig { returns(T.nilable(::String)) }
    def value_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def value_previous_change; end

    sig { returns(T::Boolean) }
    def value_previously_changed?; end

    sig { returns(T.nilable(::String)) }
    def value_previously_was; end

    sig { returns(T.nilable(::String)) }
    def value_was; end

    sig { void }
    def value_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_key?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_value?; end
  end
end
